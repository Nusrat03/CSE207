#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

void enqueue(Node **frontnode, Node **rearnode, int value) {
    Node *newnode = (Node *) malloc(sizeof(Node *));

    if (newnode == NULL) {
        printf("Queue is full!\n");
    } else {
        newnode->data = value;
        newnode->next = NULL;

        if ((*frontnode) == NULL) {
            (*frontnode) = (*rearnode) = newnode;
        } else {

            (*rearnode)->next = newnode;
            (*rearnode) = newnode;
        }
    }
}

int dequeue(Node **frontnode) {
    int x = -1;

    Node *deletenode;

    if ((*frontnode) == NULL) {
        printf("Queue is empty.\n");
    } else {
        deletenode = (*frontnode);
        (*frontnode) = (*frontnode)->next;
        x = deletenode->data;
        free(deletenode);
    }

    return x;
}

int checkIfQueueEmpty(Node *frontnode) {
    if (frontnode == NULL) {
        return 1;
    }
    return 0;
}

void displayQueue(Node *frontnode) {
    Node *temp = frontnode;

    while(temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void deletingNegative(Node **frontnode, Node **rearnode) {
    int size = 1;
    int *array = (int *) malloc(size * sizeof(int));

    for (int i = 0; !checkIfQueueEmpty((*frontnode)); i++) {
        size = i + 1;

        array = (int *) realloc(array, size * sizeof(int));

        *(array + i) = dequeue(&(*frontnode));
    }

    for (int i = 0; i < size; i++) {
        if (array[i] > 0) {
            enqueue(&(*frontnode), &(*rearnode), array[i]);
        }
    }

    free(array);
}

int main() {
    int n, num;
    Node *front = NULL, *rear = NULL;

    printf("Enter number of nums: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        scanf("%d", &num);
        enqueue(&front, &rear, num);
    }

    deletingNegative(&front, &rear);

    displayQueue(front);

    return 0;
}
