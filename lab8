#include <stdio.h>
#include <stdlib.h>


typedef struct TreeNode {
    int data;
    int height;
    struct TreeNode *right;
    struct TreeNode *left;
} TreeNode;

int nodeHeight(TreeNode *node) {
    int heightLeft, heightRight;

    heightLeft = node && node->left ? node->left->height : 0;
    heightRight = node && node->right ? node->right->height : 0;

    return heightLeft > heightRight ? heightLeft + 1 : heightRight + 1;
}

int balancingFactor (TreeNode *node) {
    int heightLeft, heightRight;

    heightLeft = node && node->left ? node->left->height : 0;
    heightRight = node && node->right ? node->right->height : 0;

    return heightLeft - heightRight;
}

TreeNode * leftLeftRotation(TreeNode *node) {
    TreeNode *nodeLeft = node->left;
    TreeNode *nodeLeftRight = nodeLeft->right;

    nodeLeft->right = node;
    node->left = nodeLeftRight;

    node->height = nodeHeight(node);
    nodeLeft->height = nodeHeight(nodeLeft);

    return nodeLeft;
}

TreeNode * rightRightRotation(TreeNode *node) {
    TreeNode *nodeRight = node->right;
    TreeNode *nodeRightLeft = nodeRight->left;

    nodeRight->left = node;
    node->right = nodeRightLeft;

    node->height = nodeHeight(node);
    nodeRight->height = nodeHeight(nodeRight);

    return nodeRight;
}

TreeNode * leftRightRotation(TreeNode *node) {
    TreeNode *nodeLeft = node->left;
    TreeNode *nodeLeftRight = nodeLeft->right;

    nodeLeft->right = nodeLeftRight->left;
    node->left = nodeLeftRight->right;

    nodeLeftRight->right = node;
    nodeLeftRight->left = nodeLeft;

    nodeLeft->height = nodeHeight(nodeLeft);
    node->height = nodeHeight(node);
    nodeLeftRight->height = nodeHeight(nodeLeftRight);

    return nodeLeftRight;
}

TreeNode * rightLeftRotation(TreeNode *node) {
    TreeNode *nodeRight = node->right;
    TreeNode *nodeRightLeft = nodeRight->left;

    nodeRight->left = nodeRightLeft->right;
    node->right = nodeRightLeft->left;

    nodeRightLeft->right = nodeRight;
    nodeRightLeft->left = node;

    nodeRight->height = nodeHeight(nodeRight);
    node->height = nodeHeight(node);
    nodeRightLeft->height = nodeHeight(nodeRightLeft);

    return nodeRightLeft;
}

TreeNode * insert(TreeNode *node, int value) {
    TreeNode *newNode;

    if (!node) {
        newNode = (TreeNode *) malloc(sizeof(TreeNode));
        newNode->data = value;
        newNode->height = 1;
        newNode->left = newNode->right = NULL;
        return newNode;
    }

    if (value > node->data) {
        node->right = insert(node->right, value);
    } else if (value < node->data) {
        node->left = insert(node->left, value);
    }

    node->height = nodeHeight(node);

    if balancingFactor((node) == 2 && (node->left) == 1) 
    {
        return leftLeftRotation(node);

    } 
    if else balancingFactor((node) == 2 && (node->left) == -1)
    {
        return leftRightRotation(node);

    } 
    else if balancingFactor(node) == -2 && (node->right) == -1) 
    {
        return rightRightRotation(node);

    } 
    else if balancingFactor((node) == -2 && (node->right) == 1) 
    {
        return rightLeftRotation(node);

    }

    return node;
}

void inorder(TreeNode *node) {
    if (node) {
        inorder(node->left);
        printf("%d ", node->data);
        inorder(node->right);
    }
}

int main() {
    TreeNode *root = NULL;

    int n, node;
    printf("Enter number of nodes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter a node: ");
        scanf("%d", &node);
        root = insert(root, node);
    }

    inorder(root);

    return 0;
}
