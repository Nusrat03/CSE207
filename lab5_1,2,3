#include<stdio.h>
#include<stdlib.h>

typedef struct queueNode
{
    int num;
    struct queueNode *next;
}Node;

typedef struct Queue
{
     Node *front, *rear;
}Queue;

 Node *newNode(int n)
{
    Node *temp = (Node *)malloc(sizeof(Node));
    temp->num = n;
    temp->next = NULL;
    return temp;
}

Queue *createQueue()
{
    Queue *q = (Queue *)malloc(sizeof(Queue));
    q->front = q->rear = NULL;
    return q;
}

void enQueue(int n)
{
    Queue *q;
    Node *temp = newNode(n);
    if(q->rear = NULL)
    {
        q->front = q->rear = temp;
        return;
    }
    q->rear->next = temp;
    q->rear = temp;
}

Node deQueue()
{
    Queue *q;
    if(q->front == NULL)
      printf("The queue is empty \n");
    
    Node *temp = q->front;
    q->front = q->front->next;
    
    printf("Deleted element : %d\n", temp->num);
}

void print()
{
    Queue *q;
   if(q->front == NULL)
      printf("\nQueue is Empty!!!\n");
   else{
      Node *temp = q->front;
      while(temp->next != NULL){
	 printf("%d : ",temp->num);
	 temp = temp -> next;
      }
      printf("\n%d : NULL\n",temp->num);
   }
}

int main()
{
    int c, n;
    printf("What you want to do? \n 1.Enqueue \n 2.Dequeue \n 3.Print \n 4.Exit \n");
    scanf("%d", &c);

    switch(c)
    {   
       case 1 : printf("Enter a value \n");
                scanf("%d", &n);
                enQueue(n);
                break;
        case 2 : deQueue();
                 break;
        case 3 : print();
                 break;
        case 4 : exit(0);
    }
}
